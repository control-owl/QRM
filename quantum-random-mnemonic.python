#!/usr/bin/env python3

import os
import argparse
import random
import hashlib
import tkinter as tk
from tkinter import simpledialog


# Variables
APP_NAME = "QRM"
APP_DESCRIPTION = "Quantum random mnemonic"
APP_version = "0.4"
entropy_file = "entropy/binary.qrn"
wordlist_file = "src/bip39-english.txt"
entropy_length = 256

# Arguments
parser = argparse.ArgumentParser(description=APP_DESCRIPTION)
parser.add_argument("-l", "--length", type=int, help="Specify entropy length in bits")
args = parser.parse_args()

if args.length:
    entropy_length = args.length
    print(f"Entropy length: {entropy_length}-bit")
else:
    print("Arguments not provided")

    def show_menu(length):
        option_bit = [
            "128",
            "256"
        ]

        root = tk.Tk()
        root.withdraw()

        # Show a simple dialog
        selected_option = simpledialog.askstring("QRM", "Select the entropy length",
                                                initialvalue=option_bit[0],
                                                parent=root)

        root.destroy()

        if selected_option == "128":
            entropy_length = 128
            print(f"Entropy length: \"{entropy_length}-bit\"")
            return entropy_length
        elif selected_option == "256":
            entropy_length = 256
            print(f"Entropy length: \"{entropy_length}-bit\"")
            return entropy_length
        else:
            print("You canceled or closed the dialog")
            exit()

    # Call the method to show the menu
    entropy_length = show_menu(entropy_length)

# Get random portion of the file
def read_random_portion(file_path, entropy_length):
    # Get the size of the file
    file_size = os.path.getsize(file_path)

    # Generate a random starting point
    random_start = random.randint(0, file_size - entropy_length)
    # Read the portion of the file
    with open(file_path, 'rb') as file:
        file.seek(random_start)
        portion = file.read(entropy_length)
        return portion

# Assuming 'entropy' is a bytes object and 'checksum' is a string
entropy = read_random_portion(entropy_file, entropy_length)
print(f"{entropy_length}-bit Entropy: \"{entropy.decode('utf-8')}\"")

# Create checksum
size = len(entropy) // 32  # number of bits to take from hash of entropy (1 bit checksum for every 32 bits entropy)
sha256 = hashlib.sha256(entropy).digest()  # hash of entropy (in raw binary)
checksum = ''.join(format(b, '08b') for b in sha256)[:size]  # get desired number of bits
print(f"Entropy checksum: \"{checksum}\"")

# Combine
full = entropy.decode('utf-8') + checksum
print(f"Entropy and Checksum combined: \"{full}\"")


# Split into strings of 11 bits
pieces = [full[i:i+11] for i in range(0, len(full), 11)]

# Get the wordlist as a list
with open(wordlist_file, 'r') as wordlist_file:
    wordlist = wordlist_file.read().splitlines()

# Convert groups of bits to array of words
print("Words:")
sentence = []
for piece in pieces:
    i = int(piece, 2)  # convert string of 11 bits to an integer
    word = wordlist[i]  # get the corresponding word from wordlist
    sentence.append(word)  # add to sentence
    print(f"{piece} {i:04d} {word}")

# Show mnemonic
mnemonic = ' '.join(sentence)
print(f"Mnemonic: \"{mnemonic}\"")
